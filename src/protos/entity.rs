// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `matrix_io/common/entity.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct ArrayValue {
    // message fields
    pub values: ::protobuf::RepeatedField<Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ArrayValue {
    fn default() -> &'a ArrayValue {
        <ArrayValue as ::protobuf::Message>::default_instance()
    }
}

impl ArrayValue {
    pub fn new() -> ArrayValue {
        ::std::default::Default::default()
    }

    // repeated .matrix_io.common.Value values = 1;


    pub fn get_values(&self) -> &[Value] {
        &self.values
    }
    pub fn clear_values(&mut self) {
        self.values.clear();
    }

    // Param is passed by value, moved
    pub fn set_values(&mut self, v: ::protobuf::RepeatedField<Value>) {
        self.values = v;
    }

    // Mutable pointer to the field.
    pub fn mut_values(&mut self) -> &mut ::protobuf::RepeatedField<Value> {
        &mut self.values
    }

    // Take field
    pub fn take_values(&mut self) -> ::protobuf::RepeatedField<Value> {
        ::std::mem::replace(&mut self.values, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ArrayValue {
    fn is_initialized(&self) -> bool {
        for v in &self.values {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.values)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.values {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.values {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArrayValue {
        ArrayValue::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Value>>(
                "values",
                |m: &ArrayValue| { &m.values },
                |m: &mut ArrayValue| { &mut m.values },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ArrayValue>(
                "ArrayValue",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ArrayValue {
        static instance: ::protobuf::rt::LazyV2<ArrayValue> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ArrayValue::new)
    }
}

impl ::protobuf::Clear for ArrayValue {
    fn clear(&mut self) {
        self.values.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArrayValue {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArrayValue {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Value {
    // message oneof groups
    pub value_type: ::std::option::Option<Value_oneof_value_type>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Value {
    fn default() -> &'a Value {
        <Value as ::protobuf::Message>::default_instance()
    }
}

#[derive(Clone,PartialEq,Debug)]
pub enum Value_oneof_value_type {
    boolean_value(bool),
    integer_value(i64),
    double_value(f64),
    entity_value(Entity),
    array_value(ArrayValue),
    timestamp_value(::protobuf::well_known_types::Timestamp),
    string_value(::std::string::String),
    blob_value(::std::vec::Vec<u8>),
    size_value(Value_Size),
}

impl Value {
    pub fn new() -> Value {
        ::std::default::Default::default()
    }

    // bool boolean_value = 1;


    pub fn get_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v)) => v,
            _ => false,
        }
    }
    pub fn clear_boolean_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_boolean_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::boolean_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_boolean_value(&mut self, v: bool) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(v))
    }

    // int64 integer_value = 2;


    pub fn get_integer_value(&self) -> i64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(v)) => v,
            _ => 0,
        }
    }
    pub fn clear_integer_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_integer_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::integer_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_integer_value(&mut self, v: i64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(v))
    }

    // double double_value = 3;


    pub fn get_double_value(&self) -> f64 {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(v)) => v,
            _ => 0.,
        }
    }
    pub fn clear_double_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_double_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::double_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_double_value(&mut self, v: f64) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(v))
    }

    // .matrix_io.common.Entity entity_value = 6;


    pub fn get_entity_value(&self) -> &Entity {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(ref v)) => v,
            _ => <Entity as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_entity_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_entity_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_entity_value(&mut self, v: Entity) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_entity_value(&mut self) -> &mut Entity {
        if let ::std::option::Option::Some(Value_oneof_value_type::entity_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(Entity::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::entity_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_entity_value(&mut self) -> Entity {
        if self.has_entity_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::entity_value(v)) => v,
                _ => panic!(),
            }
        } else {
            Entity::new()
        }
    }

    // .matrix_io.common.ArrayValue array_value = 9;


    pub fn get_array_value(&self) -> &ArrayValue {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref v)) => v,
            _ => <ArrayValue as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_array_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_array_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_array_value(&mut self, v: ArrayValue) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_array_value(&mut self) -> &mut ArrayValue {
        if let ::std::option::Option::Some(Value_oneof_value_type::array_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(ArrayValue::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::array_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_array_value(&mut self) -> ArrayValue {
        if self.has_array_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::array_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ArrayValue::new()
        }
    }

    // .google.protobuf.Timestamp timestamp_value = 10;


    pub fn get_timestamp_value(&self) -> &::protobuf::well_known_types::Timestamp {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref v)) => v,
            _ => <::protobuf::well_known_types::Timestamp as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_timestamp_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_timestamp_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_timestamp_value(&mut self, v: ::protobuf::well_known_types::Timestamp) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_timestamp_value(&mut self) -> &mut ::protobuf::well_known_types::Timestamp {
        if let ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(::protobuf::well_known_types::Timestamp::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_timestamp_value(&mut self) -> ::protobuf::well_known_types::Timestamp {
        if self.has_timestamp_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::protobuf::well_known_types::Timestamp::new()
        }
    }

    // string string_value = 17;


    pub fn get_string_value(&self) -> &str {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref v)) => v,
            _ => "",
        }
    }
    pub fn clear_string_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_string_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_value(&mut self, v: ::std::string::String) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_value(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(Value_oneof_value_type::string_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(::std::string::String::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::string_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_value(&mut self) -> ::std::string::String {
        if self.has_string_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::string_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bytes blob_value = 18;


    pub fn get_blob_value(&self) -> &[u8] {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(ref v)) => v,
            _ => &[],
        }
    }
    pub fn clear_blob_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_blob_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_blob_value(&mut self, v: ::std::vec::Vec<u8>) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_blob_value(&mut self) -> &mut ::std::vec::Vec<u8> {
        if let ::std::option::Option::Some(Value_oneof_value_type::blob_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(::std::vec::Vec::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::blob_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_blob_value(&mut self) -> ::std::vec::Vec<u8> {
        if self.has_blob_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::blob_value(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::vec::Vec::new()
        }
    }

    // .matrix_io.common.Value.Size size_value = 19;


    pub fn get_size_value(&self) -> &Value_Size {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::size_value(ref v)) => v,
            _ => <Value_Size as ::protobuf::Message>::default_instance(),
        }
    }
    pub fn clear_size_value(&mut self) {
        self.value_type = ::std::option::Option::None;
    }

    pub fn has_size_value(&self) -> bool {
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::size_value(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_size_value(&mut self, v: Value_Size) {
        self.value_type = ::std::option::Option::Some(Value_oneof_value_type::size_value(v))
    }

    // Mutable pointer to the field.
    pub fn mut_size_value(&mut self) -> &mut Value_Size {
        if let ::std::option::Option::Some(Value_oneof_value_type::size_value(_)) = self.value_type {
        } else {
            self.value_type = ::std::option::Option::Some(Value_oneof_value_type::size_value(Value_Size::new()));
        }
        match self.value_type {
            ::std::option::Option::Some(Value_oneof_value_type::size_value(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_size_value(&mut self) -> Value_Size {
        if self.has_size_value() {
            match self.value_type.take() {
                ::std::option::Option::Some(Value_oneof_value_type::size_value(v)) => v,
                _ => panic!(),
            }
        } else {
            Value_Size::new()
        }
    }
}

impl ::protobuf::Message for Value {
    fn is_initialized(&self) -> bool {
        if let Some(Value_oneof_value_type::entity_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::array_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::timestamp_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(Value_oneof_value_type::size_value(ref v)) = self.value_type {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::boolean_value(is.read_bool()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::integer_value(is.read_int64()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::double_value(is.read_double()?));
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::entity_value(is.read_message()?));
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::array_value(is.read_message()?));
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::timestamp_value(is.read_message()?));
                },
                17 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::string_value(is.read_string()?));
                },
                18 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::blob_value(is.read_bytes()?));
                },
                19 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.value_type = ::std::option::Option::Some(Value_oneof_value_type::size_value(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::boolean_value(v) => {
                    my_size += 2;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    my_size += ::protobuf::rt::value_size(2, v, ::protobuf::wire_format::WireTypeVarint);
                },
                &Value_oneof_value_type::double_value(v) => {
                    my_size += 9;
                },
                &Value_oneof_value_type::entity_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    my_size += ::protobuf::rt::string_size(17, &v);
                },
                &Value_oneof_value_type::blob_value(ref v) => {
                    my_size += ::protobuf::rt::bytes_size(18, &v);
                },
                &Value_oneof_value_type::size_value(ref v) => {
                    let len = v.compute_size();
                    my_size += 2 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.value_type {
            match v {
                &Value_oneof_value_type::boolean_value(v) => {
                    os.write_bool(1, v)?;
                },
                &Value_oneof_value_type::integer_value(v) => {
                    os.write_int64(2, v)?;
                },
                &Value_oneof_value_type::double_value(v) => {
                    os.write_double(3, v)?;
                },
                &Value_oneof_value_type::entity_value(ref v) => {
                    os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::array_value(ref v) => {
                    os.write_tag(9, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::timestamp_value(ref v) => {
                    os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &Value_oneof_value_type::string_value(ref v) => {
                    os.write_string(17, v)?;
                },
                &Value_oneof_value_type::blob_value(ref v) => {
                    os.write_bytes(18, v)?;
                },
                &Value_oneof_value_type::size_value(ref v) => {
                    os.write_tag(19, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Value {
        Value::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_bool_accessor::<_>(
                "boolean_value",
                Value::has_boolean_value,
                Value::get_boolean_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_i64_accessor::<_>(
                "integer_value",
                Value::has_integer_value,
                Value::get_integer_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_f64_accessor::<_>(
                "double_value",
                Value::has_double_value,
                Value::get_double_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Entity>(
                "entity_value",
                Value::has_entity_value,
                Value::get_entity_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ArrayValue>(
                "array_value",
                Value::has_array_value,
                Value::get_array_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ::protobuf::well_known_types::Timestamp>(
                "timestamp_value",
                Value::has_timestamp_value,
                Value::get_timestamp_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_string_accessor::<_>(
                "string_value",
                Value::has_string_value,
                Value::get_string_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_bytes_accessor::<_>(
                "blob_value",
                Value::has_blob_value,
                Value::get_blob_value,
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, Value_Size>(
                "size_value",
                Value::has_size_value,
                Value::get_size_value,
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Value>(
                "Value",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Value {
        static instance: ::protobuf::rt::LazyV2<Value> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Value::new)
    }
}

impl ::protobuf::Clear for Value {
    fn clear(&mut self) {
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.value_type = ::std::option::Option::None;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Value {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Value_Size {
    // message fields
    pub width: i64,
    pub height: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Value_Size {
    fn default() -> &'a Value_Size {
        <Value_Size as ::protobuf::Message>::default_instance()
    }
}

impl Value_Size {
    pub fn new() -> Value_Size {
        ::std::default::Default::default()
    }

    // int64 width = 1;


    pub fn get_width(&self) -> i64 {
        self.width
    }
    pub fn clear_width(&mut self) {
        self.width = 0;
    }

    // Param is passed by value, moved
    pub fn set_width(&mut self, v: i64) {
        self.width = v;
    }

    // int64 height = 2;


    pub fn get_height(&self) -> i64 {
        self.height
    }
    pub fn clear_height(&mut self) {
        self.height = 0;
    }

    // Param is passed by value, moved
    pub fn set_height(&mut self, v: i64) {
        self.height = v;
    }
}

impl ::protobuf::Message for Value_Size {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.width = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.height = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.width != 0 {
            my_size += ::protobuf::rt::value_size(1, self.width, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::value_size(2, self.height, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.width != 0 {
            os.write_int64(1, self.width)?;
        }
        if self.height != 0 {
            os.write_int64(2, self.height)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Value_Size {
        Value_Size::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "width",
                |m: &Value_Size| { &m.width },
                |m: &mut Value_Size| { &mut m.width },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "height",
                |m: &Value_Size| { &m.height },
                |m: &mut Value_Size| { &mut m.height },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Value_Size>(
                "Value.Size",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Value_Size {
        static instance: ::protobuf::rt::LazyV2<Value_Size> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Value_Size::new)
    }
}

impl ::protobuf::Clear for Value_Size {
    fn clear(&mut self) {
        self.width = 0;
        self.height = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Value_Size {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Value_Size {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Entity {
    // message fields
    pub properties: ::std::collections::HashMap<::std::string::String, Value>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Entity {
    fn default() -> &'a Entity {
        <Entity as ::protobuf::Message>::default_instance()
    }
}

impl Entity {
    pub fn new() -> Entity {
        ::std::default::Default::default()
    }

    // repeated .matrix_io.common.Entity.properties_MapEntry properties = 1;


    pub fn get_properties(&self) -> &::std::collections::HashMap<::std::string::String, Value> {
        &self.properties
    }
    pub fn clear_properties(&mut self) {
        self.properties.clear();
    }

    // Param is passed by value, moved
    pub fn set_properties(&mut self, v: ::std::collections::HashMap<::std::string::String, Value>) {
        self.properties = v;
    }

    // Mutable pointer to the field.
    pub fn mut_properties(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, Value> {
        &mut self.properties
    }

    // Take field
    pub fn take_properties(&mut self) -> ::std::collections::HashMap<::std::string::String, Value> {
        ::std::mem::replace(&mut self.properties, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Entity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(wire_type, is, &mut self.properties)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(1, &self.properties);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(1, &self.properties, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Entity {
        Entity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeMessage<Value>>(
                "properties",
                |m: &Entity| { &m.properties },
                |m: &mut Entity| { &mut m.properties },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Entity>(
                "Entity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Entity {
        static instance: ::protobuf::rt::LazyV2<Entity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Entity::new)
    }
}

impl ::protobuf::Clear for Entity {
    fn clear(&mut self) {
        self.properties.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Entity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Entity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dmatrix_io/common/entity.proto\x12\x10matrix_io.common\x1a\x1fgoogl\
    e/protobuf/timestamp.proto\"A\n\nArrayValue\x121\n\x06values\x18\x01\x20\
    \x03(\x0b2\x17.matrix_io.common.ValueR\x06valuesB\0:\0\"\xa4\x04\n\x05Va\
    lue\x12'\n\rboolean_value\x18\x01\x20\x01(\x08H\0R\x0cbooleanValueB\0\
    \x12'\n\rinteger_value\x18\x02\x20\x01(\x03H\0R\x0cintegerValueB\0\x12%\
    \n\x0cdouble_value\x18\x03\x20\x01(\x01H\0R\x0bdoubleValueB\0\x12?\n\x0c\
    entity_value\x18\x06\x20\x01(\x0b2\x18.matrix_io.common.EntityH\0R\x0ben\
    tityValueB\0\x12A\n\x0barray_value\x18\t\x20\x01(\x0b2\x1c.matrix_io.com\
    mon.ArrayValueH\0R\narrayValueB\0\x12G\n\x0ftimestamp_value\x18\n\x20\
    \x01(\x0b2\x1a.google.protobuf.TimestampH\0R\x0etimestampValueB\0\x12%\n\
    \x0cstring_value\x18\x11\x20\x01(\tH\0R\x0bstringValueB\0\x12!\n\nblob_v\
    alue\x18\x12\x20\x01(\x0cH\0R\tblobValueB\0\x12?\n\nsize_value\x18\x13\
    \x20\x01(\x0b2\x1c.matrix_io.common.Value.SizeH\0R\tsizeValueB\0\x1a:\n\
    \x04Size\x12\x16\n\x05width\x18\x01\x20\x01(\x03R\x05widthB\0\x12\x18\n\
    \x06height\x18\x02\x20\x01(\x03R\x06heightB\0:\0B\x0c\n\nvalue_type:\0\"\
    \xb2\x01\n\x06Entity\x12N\n\nproperties\x18\x01\x20\x03(\x0b2,.matrix_io\
    .common.Entity.properties_MapEntryR\npropertiesB\0\x1aV\n\x13properties_\
    MapEntry\x12\x0e\n\x03key\x18\x01(\tR\x03key\x12+\n\x05value\x18\x02(\
    \x0b2\x17.matrix_io.common.ValueR\x05value:\x028\x01:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
