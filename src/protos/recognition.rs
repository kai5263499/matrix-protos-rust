// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `matrix_io/recognition/v1/recognition.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct FeatureDescriptor {
    // message fields
    pub uuid: ::std::string::String,
    pub data_format: ::std::string::String,
    pub data: ::std::vec::Vec<f32>,
    pub tags: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeatureDescriptor {
    fn default() -> &'a FeatureDescriptor {
        <FeatureDescriptor as ::protobuf::Message>::default_instance()
    }
}

impl FeatureDescriptor {
    pub fn new() -> FeatureDescriptor {
        ::std::default::Default::default()
    }

    // string uuid = 1;


    pub fn get_uuid(&self) -> &str {
        &self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid.clear();
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: ::std::string::String) {
        self.uuid = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_uuid(&mut self) -> &mut ::std::string::String {
        &mut self.uuid
    }

    // Take field
    pub fn take_uuid(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.uuid, ::std::string::String::new())
    }

    // string data_format = 2;


    pub fn get_data_format(&self) -> &str {
        &self.data_format
    }
    pub fn clear_data_format(&mut self) {
        self.data_format.clear();
    }

    // Param is passed by value, moved
    pub fn set_data_format(&mut self, v: ::std::string::String) {
        self.data_format = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data_format(&mut self) -> &mut ::std::string::String {
        &mut self.data_format
    }

    // Take field
    pub fn take_data_format(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.data_format, ::std::string::String::new())
    }

    // repeated float data = 3;


    pub fn get_data(&self) -> &[f32] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<f32>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // repeated string tags = 4;


    pub fn get_tags(&self) -> &[::std::string::String] {
        &self.tags
    }
    pub fn clear_tags(&mut self) {
        self.tags.clear();
    }

    // Param is passed by value, moved
    pub fn set_tags(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.tags = v;
    }

    // Mutable pointer to the field.
    pub fn mut_tags(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.tags
    }

    // Take field
    pub fn take_tags(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.tags, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeatureDescriptor {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.uuid)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.data_format)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.tags)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.uuid.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.uuid);
        }
        if !self.data_format.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.data_format);
        }
        my_size += 5 * self.data.len() as u32;
        for value in &self.tags {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.uuid.is_empty() {
            os.write_string(1, &self.uuid)?;
        }
        if !self.data_format.is_empty() {
            os.write_string(2, &self.data_format)?;
        }
        for v in &self.data {
            os.write_float(3, *v)?;
        };
        for v in &self.tags {
            os.write_string(4, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeatureDescriptor {
        FeatureDescriptor::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "uuid",
                |m: &FeatureDescriptor| { &m.uuid },
                |m: &mut FeatureDescriptor| { &mut m.uuid },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "data_format",
                |m: &FeatureDescriptor| { &m.data_format },
                |m: &mut FeatureDescriptor| { &mut m.data_format },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "data",
                |m: &FeatureDescriptor| { &m.data },
                |m: &mut FeatureDescriptor| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "tags",
                |m: &FeatureDescriptor| { &m.tags },
                |m: &mut FeatureDescriptor| { &mut m.tags },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeatureDescriptor>(
                "FeatureDescriptor",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeatureDescriptor {
        static instance: ::protobuf::rt::LazyV2<FeatureDescriptor> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeatureDescriptor::new)
    }
}

impl ::protobuf::Clear for FeatureDescriptor {
    fn clear(&mut self) {
        self.uuid.clear();
        self.data_format.clear();
        self.data.clear();
        self.tags.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeatureDescriptor {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureDescriptor {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct FeatureDescriptorList {
    // message fields
    pub feature_descriptors: ::protobuf::RepeatedField<FeatureDescriptor>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a FeatureDescriptorList {
    fn default() -> &'a FeatureDescriptorList {
        <FeatureDescriptorList as ::protobuf::Message>::default_instance()
    }
}

impl FeatureDescriptorList {
    pub fn new() -> FeatureDescriptorList {
        ::std::default::Default::default()
    }

    // repeated .matrix_io.recognition.v1.FeatureDescriptor feature_descriptors = 1;


    pub fn get_feature_descriptors(&self) -> &[FeatureDescriptor] {
        &self.feature_descriptors
    }
    pub fn clear_feature_descriptors(&mut self) {
        self.feature_descriptors.clear();
    }

    // Param is passed by value, moved
    pub fn set_feature_descriptors(&mut self, v: ::protobuf::RepeatedField<FeatureDescriptor>) {
        self.feature_descriptors = v;
    }

    // Mutable pointer to the field.
    pub fn mut_feature_descriptors(&mut self) -> &mut ::protobuf::RepeatedField<FeatureDescriptor> {
        &mut self.feature_descriptors
    }

    // Take field
    pub fn take_feature_descriptors(&mut self) -> ::protobuf::RepeatedField<FeatureDescriptor> {
        ::std::mem::replace(&mut self.feature_descriptors, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for FeatureDescriptorList {
    fn is_initialized(&self) -> bool {
        for v in &self.feature_descriptors {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.feature_descriptors)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.feature_descriptors {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.feature_descriptors {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> FeatureDescriptorList {
        FeatureDescriptorList::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<FeatureDescriptor>>(
                "feature_descriptors",
                |m: &FeatureDescriptorList| { &m.feature_descriptors },
                |m: &mut FeatureDescriptorList| { &mut m.feature_descriptors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<FeatureDescriptorList>(
                "FeatureDescriptorList",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static FeatureDescriptorList {
        static instance: ::protobuf::rt::LazyV2<FeatureDescriptorList> = ::protobuf::rt::LazyV2::INIT;
        instance.get(FeatureDescriptorList::new)
    }
}

impl ::protobuf::Clear for FeatureDescriptorList {
    fn clear(&mut self) {
        self.feature_descriptors.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for FeatureDescriptorList {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for FeatureDescriptorList {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n*matrix_io/recognition/v1/recognition.proto\x12\x18matrix_io.recogniti\
    on.v1\"z\n\x11FeatureDescriptor\x12\x14\n\x04uuid\x18\x01\x20\x01(\tR\
    \x04uuidB\0\x12!\n\x0bdata_format\x18\x02\x20\x01(\tR\ndataFormatB\0\x12\
    \x14\n\x04data\x18\x03\x20\x03(\x02R\x04dataB\0\x12\x14\n\x04tags\x18\
    \x04\x20\x03(\tR\x04tagsB\0:\0\"y\n\x15FeatureDescriptorList\x12^\n\x13f\
    eature_descriptors\x18\x01\x20\x03(\x0b2+.matrix_io.recognition.v1.Featu\
    reDescriptorR\x12featureDescriptorsB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
