// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `matrix_io/malos/v1/sense.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct Dummy {
    // message fields
    pub value: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Dummy {
    fn default() -> &'a Dummy {
        <Dummy as ::protobuf::Message>::default_instance()
    }
}

impl Dummy {
    pub fn new() -> Dummy {
        ::std::default::Default::default()
    }

    // float value = 1;


    pub fn get_value(&self) -> f32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f32) {
        self.value = v;
    }
}

impl ::protobuf::Message for Dummy {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.value != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.value != 0. {
            os.write_float(1, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Dummy {
        Dummy::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "value",
                |m: &Dummy| { &m.value },
                |m: &mut Dummy| { &mut m.value },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Dummy>(
                "Dummy",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Dummy {
        static instance: ::protobuf::rt::LazyV2<Dummy> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Dummy::new)
    }
}

impl ::protobuf::Clear for Dummy {
    fn clear(&mut self) {
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Dummy {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Dummy {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Humidity {
    // message fields
    pub humidity: f32,
    pub temperature: f32,
    pub temperature_raw: f32,
    pub temperature_is_calibrated: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Humidity {
    fn default() -> &'a Humidity {
        <Humidity as ::protobuf::Message>::default_instance()
    }
}

impl Humidity {
    pub fn new() -> Humidity {
        ::std::default::Default::default()
    }

    // float humidity = 1;


    pub fn get_humidity(&self) -> f32 {
        self.humidity
    }
    pub fn clear_humidity(&mut self) {
        self.humidity = 0.;
    }

    // Param is passed by value, moved
    pub fn set_humidity(&mut self, v: f32) {
        self.humidity = v;
    }

    // float temperature = 2;


    pub fn get_temperature(&self) -> f32 {
        self.temperature
    }
    pub fn clear_temperature(&mut self) {
        self.temperature = 0.;
    }

    // Param is passed by value, moved
    pub fn set_temperature(&mut self, v: f32) {
        self.temperature = v;
    }

    // float temperature_raw = 3;


    pub fn get_temperature_raw(&self) -> f32 {
        self.temperature_raw
    }
    pub fn clear_temperature_raw(&mut self) {
        self.temperature_raw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_temperature_raw(&mut self, v: f32) {
        self.temperature_raw = v;
    }

    // bool temperature_is_calibrated = 4;


    pub fn get_temperature_is_calibrated(&self) -> bool {
        self.temperature_is_calibrated
    }
    pub fn clear_temperature_is_calibrated(&mut self) {
        self.temperature_is_calibrated = false;
    }

    // Param is passed by value, moved
    pub fn set_temperature_is_calibrated(&mut self, v: bool) {
        self.temperature_is_calibrated = v;
    }
}

impl ::protobuf::Message for Humidity {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.humidity = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.temperature = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.temperature_raw = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.temperature_is_calibrated = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.humidity != 0. {
            my_size += 5;
        }
        if self.temperature != 0. {
            my_size += 5;
        }
        if self.temperature_raw != 0. {
            my_size += 5;
        }
        if self.temperature_is_calibrated != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.humidity != 0. {
            os.write_float(1, self.humidity)?;
        }
        if self.temperature != 0. {
            os.write_float(2, self.temperature)?;
        }
        if self.temperature_raw != 0. {
            os.write_float(3, self.temperature_raw)?;
        }
        if self.temperature_is_calibrated != false {
            os.write_bool(4, self.temperature_is_calibrated)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Humidity {
        Humidity::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "humidity",
                |m: &Humidity| { &m.humidity },
                |m: &mut Humidity| { &mut m.humidity },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "temperature",
                |m: &Humidity| { &m.temperature },
                |m: &mut Humidity| { &mut m.temperature },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "temperature_raw",
                |m: &Humidity| { &m.temperature_raw },
                |m: &mut Humidity| { &mut m.temperature_raw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "temperature_is_calibrated",
                |m: &Humidity| { &m.temperature_is_calibrated },
                |m: &mut Humidity| { &mut m.temperature_is_calibrated },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Humidity>(
                "Humidity",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Humidity {
        static instance: ::protobuf::rt::LazyV2<Humidity> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Humidity::new)
    }
}

impl ::protobuf::Clear for Humidity {
    fn clear(&mut self) {
        self.humidity = 0.;
        self.temperature = 0.;
        self.temperature_raw = 0.;
        self.temperature_is_calibrated = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Humidity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Humidity {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HumidityParams {
    // message fields
    pub current_temperature: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HumidityParams {
    fn default() -> &'a HumidityParams {
        <HumidityParams as ::protobuf::Message>::default_instance()
    }
}

impl HumidityParams {
    pub fn new() -> HumidityParams {
        ::std::default::Default::default()
    }

    // float current_temperature = 1;


    pub fn get_current_temperature(&self) -> f32 {
        self.current_temperature
    }
    pub fn clear_current_temperature(&mut self) {
        self.current_temperature = 0.;
    }

    // Param is passed by value, moved
    pub fn set_current_temperature(&mut self, v: f32) {
        self.current_temperature = v;
    }
}

impl ::protobuf::Message for HumidityParams {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.current_temperature = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.current_temperature != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.current_temperature != 0. {
            os.write_float(1, self.current_temperature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HumidityParams {
        HumidityParams::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "current_temperature",
                |m: &HumidityParams| { &m.current_temperature },
                |m: &mut HumidityParams| { &mut m.current_temperature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HumidityParams>(
                "HumidityParams",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HumidityParams {
        static instance: ::protobuf::rt::LazyV2<HumidityParams> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HumidityParams::new)
    }
}

impl ::protobuf::Clear for HumidityParams {
    fn clear(&mut self) {
        self.current_temperature = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HumidityParams {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HumidityParams {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UV {
    // message fields
    pub uv_index: f32,
    pub oms_risk: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UV {
    fn default() -> &'a UV {
        <UV as ::protobuf::Message>::default_instance()
    }
}

impl UV {
    pub fn new() -> UV {
        ::std::default::Default::default()
    }

    // float uv_index = 1;


    pub fn get_uv_index(&self) -> f32 {
        self.uv_index
    }
    pub fn clear_uv_index(&mut self) {
        self.uv_index = 0.;
    }

    // Param is passed by value, moved
    pub fn set_uv_index(&mut self, v: f32) {
        self.uv_index = v;
    }

    // string oms_risk = 2;


    pub fn get_oms_risk(&self) -> &str {
        &self.oms_risk
    }
    pub fn clear_oms_risk(&mut self) {
        self.oms_risk.clear();
    }

    // Param is passed by value, moved
    pub fn set_oms_risk(&mut self, v: ::std::string::String) {
        self.oms_risk = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_oms_risk(&mut self) -> &mut ::std::string::String {
        &mut self.oms_risk
    }

    // Take field
    pub fn take_oms_risk(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.oms_risk, ::std::string::String::new())
    }
}

impl ::protobuf::Message for UV {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.uv_index = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.oms_risk)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.uv_index != 0. {
            my_size += 5;
        }
        if !self.oms_risk.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.oms_risk);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.uv_index != 0. {
            os.write_float(1, self.uv_index)?;
        }
        if !self.oms_risk.is_empty() {
            os.write_string(2, &self.oms_risk)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UV {
        UV::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "uv_index",
                |m: &UV| { &m.uv_index },
                |m: &mut UV| { &mut m.uv_index },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "oms_risk",
                |m: &UV| { &m.oms_risk },
                |m: &mut UV| { &mut m.oms_risk },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UV>(
                "UV",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UV {
        static instance: ::protobuf::rt::LazyV2<UV> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UV::new)
    }
}

impl ::protobuf::Clear for UV {
    fn clear(&mut self) {
        self.uv_index = 0.;
        self.oms_risk.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UV {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UV {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Pressure {
    // message fields
    pub pressure: f32,
    pub altitude: f32,
    pub temperature: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Pressure {
    fn default() -> &'a Pressure {
        <Pressure as ::protobuf::Message>::default_instance()
    }
}

impl Pressure {
    pub fn new() -> Pressure {
        ::std::default::Default::default()
    }

    // float pressure = 1;


    pub fn get_pressure(&self) -> f32 {
        self.pressure
    }
    pub fn clear_pressure(&mut self) {
        self.pressure = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pressure(&mut self, v: f32) {
        self.pressure = v;
    }

    // float altitude = 2;


    pub fn get_altitude(&self) -> f32 {
        self.altitude
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f32) {
        self.altitude = v;
    }

    // float temperature = 3;


    pub fn get_temperature(&self) -> f32 {
        self.temperature
    }
    pub fn clear_temperature(&mut self) {
        self.temperature = 0.;
    }

    // Param is passed by value, moved
    pub fn set_temperature(&mut self, v: f32) {
        self.temperature = v;
    }
}

impl ::protobuf::Message for Pressure {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pressure = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.altitude = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.temperature = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.pressure != 0. {
            my_size += 5;
        }
        if self.altitude != 0. {
            my_size += 5;
        }
        if self.temperature != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.pressure != 0. {
            os.write_float(1, self.pressure)?;
        }
        if self.altitude != 0. {
            os.write_float(2, self.altitude)?;
        }
        if self.temperature != 0. {
            os.write_float(3, self.temperature)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Pressure {
        Pressure::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "pressure",
                |m: &Pressure| { &m.pressure },
                |m: &mut Pressure| { &mut m.pressure },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "altitude",
                |m: &Pressure| { &m.altitude },
                |m: &mut Pressure| { &mut m.altitude },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "temperature",
                |m: &Pressure| { &m.temperature },
                |m: &mut Pressure| { &mut m.temperature },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Pressure>(
                "Pressure",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Pressure {
        static instance: ::protobuf::rt::LazyV2<Pressure> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Pressure::new)
    }
}

impl ::protobuf::Clear for Pressure {
    fn clear(&mut self) {
        self.pressure = 0.;
        self.altitude = 0.;
        self.temperature = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Pressure {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Pressure {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Imu {
    // message fields
    pub yaw: f32,
    pub pitch: f32,
    pub roll: f32,
    pub accel_x: f32,
    pub accel_y: f32,
    pub accel_z: f32,
    pub gyro_x: f32,
    pub gyro_y: f32,
    pub gyro_z: f32,
    pub mag_x: f32,
    pub mag_y: f32,
    pub mag_z: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Imu {
    fn default() -> &'a Imu {
        <Imu as ::protobuf::Message>::default_instance()
    }
}

impl Imu {
    pub fn new() -> Imu {
        ::std::default::Default::default()
    }

    // float yaw = 1;


    pub fn get_yaw(&self) -> f32 {
        self.yaw
    }
    pub fn clear_yaw(&mut self) {
        self.yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yaw(&mut self, v: f32) {
        self.yaw = v;
    }

    // float pitch = 2;


    pub fn get_pitch(&self) -> f32 {
        self.pitch
    }
    pub fn clear_pitch(&mut self) {
        self.pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitch(&mut self, v: f32) {
        self.pitch = v;
    }

    // float roll = 3;


    pub fn get_roll(&self) -> f32 {
        self.roll
    }
    pub fn clear_roll(&mut self) {
        self.roll = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roll(&mut self, v: f32) {
        self.roll = v;
    }

    // float accel_x = 4;


    pub fn get_accel_x(&self) -> f32 {
        self.accel_x
    }
    pub fn clear_accel_x(&mut self) {
        self.accel_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accel_x(&mut self, v: f32) {
        self.accel_x = v;
    }

    // float accel_y = 5;


    pub fn get_accel_y(&self) -> f32 {
        self.accel_y
    }
    pub fn clear_accel_y(&mut self) {
        self.accel_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accel_y(&mut self, v: f32) {
        self.accel_y = v;
    }

    // float accel_z = 6;


    pub fn get_accel_z(&self) -> f32 {
        self.accel_z
    }
    pub fn clear_accel_z(&mut self) {
        self.accel_z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_accel_z(&mut self, v: f32) {
        self.accel_z = v;
    }

    // float gyro_x = 7;


    pub fn get_gyro_x(&self) -> f32 {
        self.gyro_x
    }
    pub fn clear_gyro_x(&mut self) {
        self.gyro_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gyro_x(&mut self, v: f32) {
        self.gyro_x = v;
    }

    // float gyro_y = 8;


    pub fn get_gyro_y(&self) -> f32 {
        self.gyro_y
    }
    pub fn clear_gyro_y(&mut self) {
        self.gyro_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gyro_y(&mut self, v: f32) {
        self.gyro_y = v;
    }

    // float gyro_z = 9;


    pub fn get_gyro_z(&self) -> f32 {
        self.gyro_z
    }
    pub fn clear_gyro_z(&mut self) {
        self.gyro_z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_gyro_z(&mut self, v: f32) {
        self.gyro_z = v;
    }

    // float mag_x = 10;


    pub fn get_mag_x(&self) -> f32 {
        self.mag_x
    }
    pub fn clear_mag_x(&mut self) {
        self.mag_x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mag_x(&mut self, v: f32) {
        self.mag_x = v;
    }

    // float mag_y = 11;


    pub fn get_mag_y(&self) -> f32 {
        self.mag_y
    }
    pub fn clear_mag_y(&mut self) {
        self.mag_y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mag_y(&mut self, v: f32) {
        self.mag_y = v;
    }

    // float mag_z = 12;


    pub fn get_mag_z(&self) -> f32 {
        self.mag_z
    }
    pub fn clear_mag_z(&mut self) {
        self.mag_z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_mag_z(&mut self, v: f32) {
        self.mag_z = v;
    }
}

impl ::protobuf::Message for Imu {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yaw = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitch = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.roll = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.accel_x = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.accel_y = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.accel_z = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gyro_x = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gyro_y = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.gyro_z = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mag_x = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mag_y = tmp;
                },
                12 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.mag_z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.yaw != 0. {
            my_size += 5;
        }
        if self.pitch != 0. {
            my_size += 5;
        }
        if self.roll != 0. {
            my_size += 5;
        }
        if self.accel_x != 0. {
            my_size += 5;
        }
        if self.accel_y != 0. {
            my_size += 5;
        }
        if self.accel_z != 0. {
            my_size += 5;
        }
        if self.gyro_x != 0. {
            my_size += 5;
        }
        if self.gyro_y != 0. {
            my_size += 5;
        }
        if self.gyro_z != 0. {
            my_size += 5;
        }
        if self.mag_x != 0. {
            my_size += 5;
        }
        if self.mag_y != 0. {
            my_size += 5;
        }
        if self.mag_z != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.yaw != 0. {
            os.write_float(1, self.yaw)?;
        }
        if self.pitch != 0. {
            os.write_float(2, self.pitch)?;
        }
        if self.roll != 0. {
            os.write_float(3, self.roll)?;
        }
        if self.accel_x != 0. {
            os.write_float(4, self.accel_x)?;
        }
        if self.accel_y != 0. {
            os.write_float(5, self.accel_y)?;
        }
        if self.accel_z != 0. {
            os.write_float(6, self.accel_z)?;
        }
        if self.gyro_x != 0. {
            os.write_float(7, self.gyro_x)?;
        }
        if self.gyro_y != 0. {
            os.write_float(8, self.gyro_y)?;
        }
        if self.gyro_z != 0. {
            os.write_float(9, self.gyro_z)?;
        }
        if self.mag_x != 0. {
            os.write_float(10, self.mag_x)?;
        }
        if self.mag_y != 0. {
            os.write_float(11, self.mag_y)?;
        }
        if self.mag_z != 0. {
            os.write_float(12, self.mag_z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Imu {
        Imu::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "yaw",
                |m: &Imu| { &m.yaw },
                |m: &mut Imu| { &mut m.yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "pitch",
                |m: &Imu| { &m.pitch },
                |m: &mut Imu| { &mut m.pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "roll",
                |m: &Imu| { &m.roll },
                |m: &mut Imu| { &mut m.roll },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "accel_x",
                |m: &Imu| { &m.accel_x },
                |m: &mut Imu| { &mut m.accel_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "accel_y",
                |m: &Imu| { &m.accel_y },
                |m: &mut Imu| { &mut m.accel_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "accel_z",
                |m: &Imu| { &m.accel_z },
                |m: &mut Imu| { &mut m.accel_z },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gyro_x",
                |m: &Imu| { &m.gyro_x },
                |m: &mut Imu| { &mut m.gyro_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gyro_y",
                |m: &Imu| { &m.gyro_y },
                |m: &mut Imu| { &mut m.gyro_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "gyro_z",
                |m: &Imu| { &m.gyro_z },
                |m: &mut Imu| { &mut m.gyro_z },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mag_x",
                |m: &Imu| { &m.mag_x },
                |m: &mut Imu| { &mut m.mag_x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mag_y",
                |m: &Imu| { &m.mag_y },
                |m: &mut Imu| { &mut m.mag_y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "mag_z",
                |m: &Imu| { &m.mag_z },
                |m: &mut Imu| { &mut m.mag_z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Imu>(
                "Imu",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Imu {
        static instance: ::protobuf::rt::LazyV2<Imu> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Imu::new)
    }
}

impl ::protobuf::Clear for Imu {
    fn clear(&mut self) {
        self.yaw = 0.;
        self.pitch = 0.;
        self.roll = 0.;
        self.accel_x = 0.;
        self.accel_y = 0.;
        self.accel_z = 0.;
        self.gyro_x = 0.;
        self.gyro_y = 0.;
        self.gyro_z = 0.;
        self.mag_x = 0.;
        self.mag_y = 0.;
        self.mag_z = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Imu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Imu {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1ematrix_io/malos/v1/sense.proto\x12\x18matrix_io.malos.v1.sense\"!\
    \n\x05Dummy\x12\x16\n\x05value\x18\x01\x20\x01(\x02R\x05valueB\0:\0\"\
    \xb7\x01\n\x08Humidity\x12\x1c\n\x08humidity\x18\x01\x20\x01(\x02R\x08hu\
    midityB\0\x12\"\n\x0btemperature\x18\x02\x20\x01(\x02R\x0btemperatureB\0\
    \x12)\n\x0ftemperature_raw\x18\x03\x20\x01(\x02R\x0etemperatureRawB\0\
    \x12<\n\x19temperature_is_calibrated\x18\x04\x20\x01(\x08R\x17temperatur\
    eIsCalibratedB\0:\0\"E\n\x0eHumidityParams\x121\n\x13current_temperature\
    \x18\x01\x20\x01(\x02R\x12currentTemperatureB\0:\0\"@\n\x02UV\x12\x1b\n\
    \x08uv_index\x18\x01\x20\x01(\x02R\x07uvIndexB\0\x12\x1b\n\x08oms_risk\
    \x18\x02\x20\x01(\tR\x07omsRiskB\0:\0\"l\n\x08Pressure\x12\x1c\n\x08pres\
    sure\x18\x01\x20\x01(\x02R\x08pressureB\0\x12\x1c\n\x08altitude\x18\x02\
    \x20\x01(\x02R\x08altitudeB\0\x12\"\n\x0btemperature\x18\x03\x20\x01(\
    \x02R\x0btemperatureB\0:\0\"\xaa\x02\n\x03Imu\x12\x12\n\x03yaw\x18\x01\
    \x20\x01(\x02R\x03yawB\0\x12\x16\n\x05pitch\x18\x02\x20\x01(\x02R\x05pit\
    chB\0\x12\x14\n\x04roll\x18\x03\x20\x01(\x02R\x04rollB\0\x12\x19\n\x07ac\
    cel_x\x18\x04\x20\x01(\x02R\x06accelXB\0\x12\x19\n\x07accel_y\x18\x05\
    \x20\x01(\x02R\x06accelYB\0\x12\x19\n\x07accel_z\x18\x06\x20\x01(\x02R\
    \x06accelZB\0\x12\x17\n\x06gyro_x\x18\x07\x20\x01(\x02R\x05gyroXB\0\x12\
    \x17\n\x06gyro_y\x18\x08\x20\x01(\x02R\x05gyroYB\0\x12\x17\n\x06gyro_z\
    \x18\t\x20\x01(\x02R\x05gyroZB\0\x12\x15\n\x05mag_x\x18\n\x20\x01(\x02R\
    \x04magXB\0\x12\x15\n\x05mag_y\x18\x0b\x20\x01(\x02R\x04magYB\0\x12\x15\
    \n\x05mag_z\x18\x0c\x20\x01(\x02R\x04magZB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
