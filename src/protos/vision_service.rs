// This file is generated by rust-protobuf 2.25.1. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `matrix_io/vision/v1/vision_service.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_1;

#[derive(PartialEq,Clone,Default)]
pub struct VisionRequest {
    // message fields
    pub image: ::std::vec::Vec<u8>,
    pub detection: ::std::vec::Vec<super::vision::EnumDetectionTag>,
    pub recognition: ::std::vec::Vec<super::vision::EnumFacialRecognitionTag>,
    pub vehicle_recognition: ::std::vec::Vec<super::vision::EnumVehicleRecognitionTag>,
    pub image_list: ::protobuf::SingularPtrField<super::vision::ImageList>,
    pub video: ::protobuf::SingularPtrField<super::vision::Video>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VisionRequest {
    fn default() -> &'a VisionRequest {
        <VisionRequest as ::protobuf::Message>::default_instance()
    }
}

impl VisionRequest {
    pub fn new() -> VisionRequest {
        ::std::default::Default::default()
    }

    // bytes image = 1;


    pub fn get_image(&self) -> &[u8] {
        &self.image
    }
    pub fn clear_image(&mut self) {
        self.image.clear();
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ::std::vec::Vec<u8>) {
        self.image = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.image
    }

    // Take field
    pub fn take_image(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.image, ::std::vec::Vec::new())
    }

    // repeated .matrix_io.vision.v1.EnumDetectionTag detection = 2;


    pub fn get_detection(&self) -> &[super::vision::EnumDetectionTag] {
        &self.detection
    }
    pub fn clear_detection(&mut self) {
        self.detection.clear();
    }

    // Param is passed by value, moved
    pub fn set_detection(&mut self, v: ::std::vec::Vec<super::vision::EnumDetectionTag>) {
        self.detection = v;
    }

    // Mutable pointer to the field.
    pub fn mut_detection(&mut self) -> &mut ::std::vec::Vec<super::vision::EnumDetectionTag> {
        &mut self.detection
    }

    // Take field
    pub fn take_detection(&mut self) -> ::std::vec::Vec<super::vision::EnumDetectionTag> {
        ::std::mem::replace(&mut self.detection, ::std::vec::Vec::new())
    }

    // repeated .matrix_io.vision.v1.EnumFacialRecognitionTag recognition = 3;


    pub fn get_recognition(&self) -> &[super::vision::EnumFacialRecognitionTag] {
        &self.recognition
    }
    pub fn clear_recognition(&mut self) {
        self.recognition.clear();
    }

    // Param is passed by value, moved
    pub fn set_recognition(&mut self, v: ::std::vec::Vec<super::vision::EnumFacialRecognitionTag>) {
        self.recognition = v;
    }

    // Mutable pointer to the field.
    pub fn mut_recognition(&mut self) -> &mut ::std::vec::Vec<super::vision::EnumFacialRecognitionTag> {
        &mut self.recognition
    }

    // Take field
    pub fn take_recognition(&mut self) -> ::std::vec::Vec<super::vision::EnumFacialRecognitionTag> {
        ::std::mem::replace(&mut self.recognition, ::std::vec::Vec::new())
    }

    // repeated .matrix_io.vision.v1.EnumVehicleRecognitionTag vehicle_recognition = 6;


    pub fn get_vehicle_recognition(&self) -> &[super::vision::EnumVehicleRecognitionTag] {
        &self.vehicle_recognition
    }
    pub fn clear_vehicle_recognition(&mut self) {
        self.vehicle_recognition.clear();
    }

    // Param is passed by value, moved
    pub fn set_vehicle_recognition(&mut self, v: ::std::vec::Vec<super::vision::EnumVehicleRecognitionTag>) {
        self.vehicle_recognition = v;
    }

    // Mutable pointer to the field.
    pub fn mut_vehicle_recognition(&mut self) -> &mut ::std::vec::Vec<super::vision::EnumVehicleRecognitionTag> {
        &mut self.vehicle_recognition
    }

    // Take field
    pub fn take_vehicle_recognition(&mut self) -> ::std::vec::Vec<super::vision::EnumVehicleRecognitionTag> {
        ::std::mem::replace(&mut self.vehicle_recognition, ::std::vec::Vec::new())
    }

    // .matrix_io.vision.v1.ImageList image_list = 4;


    pub fn get_image_list(&self) -> &super::vision::ImageList {
        self.image_list.as_ref().unwrap_or_else(|| <super::vision::ImageList as ::protobuf::Message>::default_instance())
    }
    pub fn clear_image_list(&mut self) {
        self.image_list.clear();
    }

    pub fn has_image_list(&self) -> bool {
        self.image_list.is_some()
    }

    // Param is passed by value, moved
    pub fn set_image_list(&mut self, v: super::vision::ImageList) {
        self.image_list = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_image_list(&mut self) -> &mut super::vision::ImageList {
        if self.image_list.is_none() {
            self.image_list.set_default();
        }
        self.image_list.as_mut().unwrap()
    }

    // Take field
    pub fn take_image_list(&mut self) -> super::vision::ImageList {
        self.image_list.take().unwrap_or_else(|| super::vision::ImageList::new())
    }

    // .matrix_io.vision.v1.Video video = 5;


    pub fn get_video(&self) -> &super::vision::Video {
        self.video.as_ref().unwrap_or_else(|| <super::vision::Video as ::protobuf::Message>::default_instance())
    }
    pub fn clear_video(&mut self) {
        self.video.clear();
    }

    pub fn has_video(&self) -> bool {
        self.video.is_some()
    }

    // Param is passed by value, moved
    pub fn set_video(&mut self, v: super::vision::Video) {
        self.video = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_video(&mut self) -> &mut super::vision::Video {
        if self.video.is_none() {
            self.video.set_default();
        }
        self.video.as_mut().unwrap()
    }

    // Take field
    pub fn take_video(&mut self) -> super::vision::Video {
        self.video.take().unwrap_or_else(|| super::vision::Video::new())
    }
}

impl ::protobuf::Message for VisionRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.image_list {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.video {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.image)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.detection, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.recognition, 3, &mut self.unknown_fields)?
                },
                6 => {
                    ::protobuf::rt::read_repeated_enum_with_unknown_fields_into(wire_type, is, &mut self.vehicle_recognition, 6, &mut self.unknown_fields)?
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.image_list)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.video)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.image);
        }
        for value in &self.detection {
            my_size += ::protobuf::rt::enum_size(2, *value);
        };
        for value in &self.recognition {
            my_size += ::protobuf::rt::enum_size(3, *value);
        };
        for value in &self.vehicle_recognition {
            my_size += ::protobuf::rt::enum_size(6, *value);
        };
        if let Some(ref v) = self.image_list.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.video.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.image.is_empty() {
            os.write_bytes(1, &self.image)?;
        }
        for v in &self.detection {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(v))?;
        };
        for v in &self.recognition {
            os.write_enum(3, ::protobuf::ProtobufEnum::value(v))?;
        };
        for v in &self.vehicle_recognition {
            os.write_enum(6, ::protobuf::ProtobufEnum::value(v))?;
        };
        if let Some(ref v) = self.image_list.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.video.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VisionRequest {
        VisionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "image",
                |m: &VisionRequest| { &m.image },
                |m: &mut VisionRequest| { &mut m.image },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::vision::EnumDetectionTag>>(
                "detection",
                |m: &VisionRequest| { &m.detection },
                |m: &mut VisionRequest| { &mut m.detection },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::vision::EnumFacialRecognitionTag>>(
                "recognition",
                |m: &VisionRequest| { &m.recognition },
                |m: &mut VisionRequest| { &mut m.recognition },
            ));
            fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::vision::EnumVehicleRecognitionTag>>(
                "vehicle_recognition",
                |m: &VisionRequest| { &m.vehicle_recognition },
                |m: &mut VisionRequest| { &mut m.vehicle_recognition },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::vision::ImageList>>(
                "image_list",
                |m: &VisionRequest| { &m.image_list },
                |m: &mut VisionRequest| { &mut m.image_list },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::vision::Video>>(
                "video",
                |m: &VisionRequest| { &m.video },
                |m: &mut VisionRequest| { &mut m.video },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VisionRequest>(
                "VisionRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VisionRequest {
        static instance: ::protobuf::rt::LazyV2<VisionRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VisionRequest::new)
    }
}

impl ::protobuf::Clear for VisionRequest {
    fn clear(&mut self) {
        self.image.clear();
        self.detection.clear();
        self.recognition.clear();
        self.vehicle_recognition.clear();
        self.image_list.clear();
        self.video.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VisionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VisionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n(matrix_io/vision/v1/vision_service.proto\x12\x13matrix_io.vision.v1\
    \x1a\x20matrix_io/vision/v1/vision.proto\"\x9b\x03\n\rVisionRequest\x12\
    \x16\n\x05image\x18\x01\x20\x01(\x0cR\x05imageB\0\x12E\n\tdetection\x18\
    \x02\x20\x03(\x0e2%.matrix_io.vision.v1.EnumDetectionTagR\tdetectionB\0\
    \x12Q\n\x0brecognition\x18\x03\x20\x03(\x0e2-.matrix_io.vision.v1.EnumFa\
    cialRecognitionTagR\x0brecognitionB\0\x12a\n\x13vehicle_recognition\x18\
    \x06\x20\x03(\x0e2..matrix_io.vision.v1.EnumVehicleRecognitionTagR\x12ve\
    hicleRecognitionB\0\x12?\n\nimage_list\x18\x04\x20\x01(\x0b2\x1e.matrix_\
    io.vision.v1.ImageListR\timageListB\0\x122\n\x05video\x18\x05\x20\x01(\
    \x0b2\x1a.matrix_io.vision.v1.VideoR\x05videoB\0:\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
